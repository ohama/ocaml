<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/</link>
    <description>Recent content in Examples on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/ocaml/ocamllex-tutorial/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Translate</title>
      <link>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/translate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/translate/</guid>
      <description>This example translates the text &amp;ldquo;current_directory&amp;rdquo; to the current directory.
{ } rule translate = parse | &amp;#34;current_directory&amp;#34;	{ print_string (Sys.getcwd ()) } | _ as c	{ print_char c } | eof	{ exit 0 } { let main () = let lexbuf = Lexing.from_channel stdin in while true do translate lexbuf done let _ = Printexc.print main () }</description>
    </item>
    
    <item>
      <title>Word count</title>
      <link>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/wordcount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/wordcount/</guid>
      <description>This example shows the number of lines, words and characters of the given file if the filename is given, or of the standard input if no command arguments are given.
{ } rule count lines words chars = parse | &amp;#39;\n&amp;#39;	{ count (lines+1) words (chars+1) lexbuf } | [^ &amp;#39; &amp;#39; &amp;#39;\t&amp;#39; &amp;#39;\n&amp;#39;]+ as word { count lines (words+1) (chars+ String.length word) lexbuf } | _	{ count lines words (chars+1) lexbuf } | eof	{ (lines, words, chars) } { let main () = let cin = if Array.</description>
    </item>
    
    <item>
      <title>Toy language</title>
      <link>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/toylanguage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamllex-tutorial/examples/toylanguage/</guid>
      <description>In this example, the scanner function toy_lang returns a value of token type, but the main function does nothing with it.
{ open Printf let create_hashtable size init = let tbl = Hashtbl.create size in List.iter (fun (key, data) -&amp;gt; Hashtbl.add tbl key data) init; tbl type token = | IF | THEN | ELSE | BEGIN | END | FUNCTION | ID of string | OP of char | INT of int | FLOAT of float | CHAR of char let keyword_table = create_hashtable 8 [ (&amp;#34;if&amp;#34;, IF); (&amp;#34;then&amp;#34;, THEN); (&amp;#34;else&amp;#34;, ELSE); (&amp;#34;begin&amp;#34;, BEGIN); (&amp;#34;end&amp;#34;, END); (&amp;#34;function&amp;#34;, FUNCTION) ] } let digit = [&amp;#39;0&amp;#39;-&amp;#39;9&amp;#39;] let id = [&amp;#39;a&amp;#39;-&amp;#39;z&amp;#39; &amp;#39;A&amp;#39;-&amp;#39;Z&amp;#39;][&amp;#39;a&amp;#39;-&amp;#39;z&amp;#39; &amp;#39;0&amp;#39;-&amp;#39;9&amp;#39;]* rule toy_lang = parse | digit+ as inum { let num = int_of_string inum in printf &amp;#34;integer: %s (%d)\n&amp;#34; inum num; INT num } | digit+ &amp;#39;.</description>
    </item>
    
  </channel>
</rss>