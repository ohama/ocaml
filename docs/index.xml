<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/</link>
    <description>Recent content in Introduction on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Introduction</title>
      <link>https://ohama.github.io/ocamllex/01.intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/01.intro/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>11.1 Keyword table</title>
      <link>https://ohama.github.io/ocamllex/11.usagetips/11.1.keywordtable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/11.usagetips/11.1.keywordtable/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>12.1 Translate</title>
      <link>https://ohama.github.io/ocamllex/12.examples/12.1.translate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/12.examples/12.1.translate/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>13.1 License in flex</title>
      <link>https://ohama.github.io/ocamllex/13.license/13.1.license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/13.license/13.1.license/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>6.1 Position</title>
      <link>https://ohama.github.io/ocamllex/06.actions/6.1.position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/06.actions/6.1.position/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>11.2 Nested comments</title>
      <link>https://ohama.github.io/ocamllex/11.usagetips/11.2.nestedcomments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/11.usagetips/11.2.nestedcomments/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>12.2 Word count</title>
      <link>https://ohama.github.io/ocamllex/12.examples/12.2.wordcount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/12.examples/12.2.wordcount/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>13.2 Copyright and permission</title>
      <link>https://ohama.github.io/ocamllex/13.license/13.2.ocamllexcopyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/13.license/13.2.ocamllexcopyright/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>2. Some simple examples</title>
      <link>https://ohama.github.io/ocamllex/02.simpleexample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/02.simpleexample/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>12.3 Toy language</title>
      <link>https://ohama.github.io/ocamllex/12.examples/12.3.toylanguage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/12.examples/12.3.toylanguage/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>3. Format of the input file</title>
      <link>https://ohama.github.io/ocamllex/03.formatofinputfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/03.formatofinputfile/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>4. Patterns</title>
      <link>https://ohama.github.io/ocamllex/04.patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/04.patterns/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>5. How the input is matched</title>
      <link>https://ohama.github.io/ocamllex/05.howmatched/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/05.howmatched/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>7. The generted scanner</title>
      <link>https://ohama.github.io/ocamllex/07.generatedscanner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/07.generatedscanner/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>8. Start conditions</title>
      <link>https://ohama.github.io/ocamllex/08.startcondition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/08.startcondition/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>9. Interfacing with ocamlyacc</title>
      <link>https://ohama.github.io/ocamllex/09.interfacewithocamlyacc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/09.interfacewithocamlyacc/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>10. Options</title>
      <link>https://ohama.github.io/ocamllex/10.options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamllex/10.options/</guid>
      <description>Introduction Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ohama.github.io/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/readme/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Languages</title>
      <link>https://ohama.github.io/ocamlyacc/concepts/languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocamlyacc/concepts/languages/</guid>
      <description>Languages and Context-Free Grammars In order for Ocamlyacc to parse a language, it must be described by a context-free grammar. This means that you specify one or more syntactic groupings and give rules for constructing them from their parts. For example, in the C language, one kind of grouping is called an expression&#39;. One rule for making an expression might be,An expression can be made of a minus sign and another expression&#39;&#39;.</description>
    </item>
    
  </channel>
</rss>