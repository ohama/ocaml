<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parser algorithm on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/</link>
    <description>Recent content in Parser algorithm on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lookahead Tokens</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/lookaheadtokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/lookaheadtokens/</guid>
      <description>The Ocamlyacc parser does not always reduce immediately as soon as the last n tokens and groupings match a rule. This is because such a simple strategy is inadequate to handle most languages. Instead, when a reduction is possible, the parser sometimes &amp;ldquo;looks ahead&amp;rdquo; at the next token in order to decide what to do.
When a token is read, it is not immediately shifted; first it becomes the look-ahead token, which is not on the stack.</description>
    </item>
    
    <item>
      <title>Operator Precedence</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/operatorprecedence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/operatorprecedence/</guid>
      <description>Another situation where shift/reduce conflicts appear is in arithmetic expressions. Here shifting is not always the preferred resolution; the Ocamlyacc declarations for operator precedence allow you to specify when to shift and when to reduce.
When Precedence is Needed Consider the following ambiguous grammar fragment (ambiguous because the input 1 - 2 * 3 can be parsed in two different ways):
expr: expr MINUS expr | expr MULTIPLY expr | expr LT expr | LPAREN expr RPAREN .</description>
    </item>
    
    <item>
      <title>Shift Reduct Conflicts</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/shiftreduceconflicts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/shiftreduceconflicts/</guid>
      <description>Suppose we are parsing a language which has if-then and if-then-else statements, with a pair of rules like this:
if_stmt: IF expr THEN stmt | IF expr THEN stmt ELSE stmt ;  Here we assume that IF, THEN and ELSE are terminal symbols for specific keyword tokens.
When the ELSE token is read and becomes the look-ahead token, the contents of the stack (assuming the input is valid) are just right for reduction by the first rule.</description>
    </item>
    
    <item>
      <title>Context-Dependent Precedence</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/contextdependentprecedence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/contextdependentprecedence/</guid>
      <description>Often the precedence of an operator depends on the context. This sounds outlandish at first, but it is really very common. For example, a minus sign typically has a very high precedence as a unary operator, and a somewhat lower precedence (lower than multiplication) as a binary operator.
The Ocamlyacc precedence declarations, %left, %right and %nonassoc, can only be used once for a given token; so a token has only one precedence declared in this way.</description>
    </item>
    
    <item>
      <title>Parser States</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/parserstates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/parserstates/</guid>
      <description>The function yyparse is implemented using a finite-state machine. The values pushed on the parser stack are not simply token type codes; they represent the entire sequence of terminal and nonterminal symbols at or near the top of the stack. The current state collects all the information about previous input which is relevant to deciding what to do next.
Each time a look-ahead token is read, the current parser state together with the type of look-ahead token are looked up in a table.</description>
    </item>
    
    <item>
      <title>Reduce/Reduce Conflicts</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/reducereduceconflicts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/reducereduceconflicts/</guid>
      <description>A reduce/reduce conflict occurs if there are two or more rules that apply to the same sequence of input. This usually indicates a serious error in the grammar.
For example, here is an erroneous attempt to define a sequence of zero or more word groupings.
sequence: /* empty */	{ printf &amp;quot;empty sequence\n&amp;quot; } | maybeword	{} | sequence word	{ printf &amp;quot;added word %s\n&amp;quot; $2 } ; maybeword: /* empty */	{ printf &amp;quot;empty maybeword\n&amp;quot; } | word	{ printf &amp;quot;single word %s\n&amp;quot; $1 } ;  The error is an ambiguity: there is more than one way to parse a single word into a sequence.</description>
    </item>
    
    <item>
      <title>Misterious Reduce/Reduce Conflicts</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/mysteriousreducereductconflicts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parseralgorithm/mysteriousreducereductconflicts/</guid>
      <description>Sometimes reduce/reduce conflicts can occur that don&amp;rsquo;t look warranted. Here is an example:
%token ID COMMA COLON %% def: param_spec return_spec COMMA ; param_spec: type | name_list COLON type ; return_spec: type | name COLON type ; type: ID ; name: ID ; name_list: name | name COMMA name_list ;  It would seem that this grammar can be parsed with only a single token of look-ahead: when a param_spec is being read, an ID is a name if a comma or colon follows, or a type if another ID follows.</description>
    </item>
    
  </channel>
</rss>