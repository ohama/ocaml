<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
<<<<<<< HEAD
    <title>Ocamlyacc tutorial on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/</link>
    <description>Recent content in Ocamlyacc tutorial on Documentation for Hugo Learn Theme</description>
=======
    <title>Ocamlyacc Tutorial on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/</link>
    <description>Recent content in Ocamlyacc Tutorial on Documentation for Hugo Learn Theme</description>
>>>>>>> 975407b9d673abab4783fae6252f6f48ffd1aa6c
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/ocaml/ocamlyacc-tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
<<<<<<< HEAD
    <item>
      <title>Introduction</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/introduction/</guid>
      <description>Ocamlyacc is a general-purpose parser generator that converts a grammar description for an LALR(1) context-free grammar into a Ocaml program to parse that grammar. Once you are proficient with Ocamlyacc, you may use it to develop a wide range of language parsers, from those used in simple desk calculators to complex programming languages.
Ocamlyacc is very close to the well-known yacc (or bison) commands that can be found in most C programming environments.</description>
    </item>
    
    <item>
      <title>Error Recovery</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/errorrecovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/errorrecovery/</guid>
      <description>It is not usually acceptable to have a program terminate on a parse error. For example, a compiler should recover sufficiently to parse the rest of the input file and check it for errors; a calculator should accept another expression.
In a simple interactive command parser where each input is one line, it may be sufficient to have the caller catch the exception and ignore the rest of the input line when that happens (and then call parse function again).</description>
    </item>
    
    <item>
      <title>Debugging your parser</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/debugging/</guid>
      <description>To debug the parser generated by ocamlyacc:
Generate parsing infomation in the file grammar.output using -v option (like &amp;ldquo;ocamlyacc -v filneme.mly&amp;rdquo;): the information consists of the parsing table and a report on conflicts.
Set p option of the OCAMLRUNPARAM environment variable: for example, execute &amp;ldquo;export OCAMLRUNPARAM=&amp;lsquo;p&amp;rsquo; &amp;rdquo; on bash shell.
The parser prints messages about its actions such as shifting a token, reducing a rule.
You can find rule numbers and state numbers mentioned in the messages at the file grammar.</description>
    </item>
    
=======
>>>>>>> 975407b9d673abab4783fae6252f6f48ffd1aa6c
  </channel>
</rss>