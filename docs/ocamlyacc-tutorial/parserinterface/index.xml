<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parser interface on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/</link>
    <description>Recent content in Parser interface on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parser Functions</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/parserfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/parserfunctions/</guid>
      <description>To cause parsing to occur, you call the parser function with two parameters. The first parameter is the lexical analyzer function of type
Lexing.lexbuf -&amp;gt; token  and the second is a value of Lexing.lexbuf type.
If the start symbol is parse in the file parser.mly and the lexer function is is token of the file lexer.mll, the typical usage is:
let lexbuf = Lexing.from_channel stdin in ... let result = Parser.</description>
    </item>
    
    <item>
      <title>Lexical Functions</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/lexicalfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/lexicalfunctions/</guid>
      <description>The lexical analyzer function, named after rule declarations, recognizes tokens from the input stream and returns them to the parser. Ocamlyacc does not create this function automatically; you must write it so that parser function can call it. The function is sometimes referred to as a lexical scanner.
This function is usually generated by ocamllex. See Chapter 12 Lexer and parser generators (ocamllex, ocamlyacc).</description>
    </item>
    
    <item>
      <title>Error Functions</title>
      <link>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/errorfunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/ocamlyacc-tutorial/parserinterface/errorfunctions/</guid>
      <description>The Ocamlyacc parser detects a parse error or syntax error whenever it reads a token which cannot satisfy any syntax rule. An action in the grammar can also explicitly proclaim an error, using the raise Parsing.Parse_error.
The Ocamlyacc parser expects to report the error by calling an error reporting function named parse_error, which is optional. The default parse_error function does nothing and returns. It is called by the parser function whenever a syntax error is found, and it receives one argument.</description>
    </item>
    
  </channel>
</rss>