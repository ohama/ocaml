<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Range widgets on Documentation for Hugo Learn Theme</title>
    <link>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/</link>
    <description>Recent content in Range widgets on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scale widget</title>
      <link>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/scrollbarwidgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/scrollbarwidgets/</guid>
      <description>Scale widgets are used to allow the user to visually select and manipulate a value within a specific range. You might want to use a scale widget, for example, to adjust the magnification level on a zoomed preview of a picture, or to control the brightness of a color, or to specify the number of minutes of inactivity before a screensaver takes over the screen.
Creating a Scale Widget As with scrollbars, there is a widget type for horizontal and vertical scale widgets.</description>
    </item>
    
    <item>
      <title>Common range functions</title>
      <link>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/commonrangefunctions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/commonrangefunctions/</guid>
      <description>The Range widget class is fairly complicated internally, but, like all the &amp;ldquo;base class&amp;rdquo; widgets, most of its complexity is only interesting if you want to hack on it. Also, almost all of the functions and signals it defines are only really used in writing derived widgets. There are, however, a few useful functions that will work on all range widgets.
Setting the Update Policy The &amp;ldquo;update policy&amp;rdquo; of a range widget defines at what points during user interaction it will change the value field of its Adjustment and emit the &amp;ldquo;value_changed&amp;rdquo; signal on this Adjustment.</description>
    </item>
    
    <item>
      <title>Key and mouse bindings</title>
      <link>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/keymousebindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/keymousebindings/</guid>
      <description>All of the GTK range widgets react to mouse clicks in more or less the same way. Clicking button-1 in the trough will cause its adjustment&amp;rsquo;s page_increment to be added or subtracted from its value, and the slider to be moved accordingly. Clicking mouse button-2 in the trough will jump the slider to the point at which the button was clicked. Clicking button-3 in the trough of a range or any button on a scrollbar&amp;rsquo;s arrows will cause its adjustment&amp;rsquo;s value to change by step_increment at a time.</description>
    </item>
    
    <item>
      <title>Example</title>
      <link>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ohama.github.io/ocaml/lablgtk2-tutorial/rangewidgets/example/</guid>
      <description>It basically puts up a window with three range widgets all connected to the same adjustment, and a couple of controls for adjusting some of the parameters mentioned above and in the section on adjustments, so you can see how they affect the way these widgets work for the user.
(* file: range.ml *) let cb_pos_menu_select hscale vscale pos () = hscale#set_value_pos pos; vscale#set_value_pos pos let cb_update_menu_select hscale vscale policy () = hscale#set_update_policy policy; vscale#set_update_policy policy let cb_digits_scale hscale vscale adj () = hscale#set_digits (int_of_float adj#value); vscale#set_digits (int_of_float adj#value) let clamp x low high = if x &amp;gt; high then high else if x &amp;lt; low then low else x let cb_page_size get (set: GData.</description>
    </item>
    
  </channel>
</rss>